use std::{path::Path, ffi::OsStr};

// 44 languages
pub enum Lang {
  Armasm,
  C,
  Clojure,
  Cmake,
  Coffeescript,
  Cpp,
  Csharp,
  Css,
  Dart,
  Diff,
  Elixir,
  Erlang,
  Go,
  Graphql,
  Groovy,
  Haskell,
  Ini,
  Java,
  Javascript,
  Json,
  Julia,
  Kotlin,
  Less,
  Lisp,
  Lua,
  Makefile,
  Markdown,
  Objectivec,
  Perl,
  Php,
  Plaintext,
  Python,
  R,
  Ruby,
  Rust,
  Scala,
  Scss,
  Shell,
  Sql,
  Swift,
  Typescript,
  Vbnet,
  Xml,
  Yaml,
}

impl Lang {
  pub fn from_path(path: &str) -> Option<Lang> {
    let path = Path::new(path);
    let name
      = path.file_name().and_then(OsStr::to_str);
    let extension
      = path.extension().and_then(OsStr::to_str);
  
    match extension {
      None => match name {
        None => None,
        Some(name) => match name {
          "CMakeLists.txt" => Some(Lang::Cmake),
          "Makefile" => Some(Lang::Makefile),
          ".bashrc" => Some(Lang::Shell),
          ".bash_profile" => Some(Lang::Shell),
          ".env" => Some(Lang::Shell),
          ".profile" => Some(Lang::Shell),
          ".zshrc" => Some(Lang::Shell),
          _ => None,
        },
      },
      Some(extension) => {
        match extension.to_ascii_lowercase().as_str() {
          "asm" => Some(Lang::Armasm),
          "c" => Some(Lang::C),
          "cc" => Some(Lang::Cpp),
          "cjs" => Some(Lang::Javascript),
          "cl" => Some(Lang::Lisp),
          "clj" => Some(Lang::Clojure),
          "cljc" => Some(Lang::Clojure),
          "cljs" => Some(Lang::Clojure),
          "cmake" => Some(Lang::Cmake),
          "coffee" => Some(Lang::Coffeescript),
          "cpp" => Some(Lang::Cpp),
          "cs" => Some(Lang::Csharp),
          "cson" => Some(Lang::Json),
          "css" => Some(Lang::Css),
          "cxx" => Some(Lang::Cpp),
          "dart" => Some(Lang::Dart),
          "diff" => Some(Lang::Diff),
          "ejs" => Some(Lang::Xml),
          "el" => Some(Lang::Lisp),
          "erl" => Some(Lang::Erlang),
          "ex" => Some(Lang::Elixir),
          "exs" => Some(Lang::Elixir),
          "gemspec" => Some(Lang::Ruby),
          "go" => Some(Lang::Go),
          "gql" => Some(Lang::Graphql),
          "graphql" => Some(Lang::Graphql),
          "groovy" => Some(Lang::Groovy),
          "h" => Some(Lang::C),
          "hh" => Some(Lang::Cpp),
          "hpp" => Some(Lang::Cpp),
          "hrl" => Some(Lang::Erlang),
          "hs" => Some(Lang::Haskell),
          "htm" => Some(Lang::Xml),
          "html" => Some(Lang::Xml),
          "hxx" => Some(Lang::Cpp),
          "ini" => Some(Lang::Ini),
          "ipynb" => Some(Lang::Json),
          "irbrc" => Some(Lang::Ruby),
          "j2" => Some(Lang::Xml),
          "java" => Some(Lang::Java),
          "jinja" => Some(Lang::Xml),
          "jinja2" => Some(Lang::Xml),
          "jl" => Some(Lang::Julia),
          "js" => Some(Lang::Javascript),
          "json" => Some(Lang::Json),
          "jsx" => Some(Lang::Javascript),
          "ksh" => Some(Lang::Shell),
          "kt" => Some(Lang::Kotlin),
          "kts" => Some(Lang::Kotlin),
          "l" => Some(Lang::Lisp),
          "less" => Some(Lang::Less),
          "lisp" => Some(Lang::Lisp),
          "log" => Some(Lang::Plaintext),
          "lua" => Some(Lang::Lua),
          "lsp" => Some(Lang::Lisp),
          "m" => Some(Lang::Objectivec),
          "make" => Some(Lang::Makefile),
          "makefile" => Some(Lang::Makefile),
          "markdown" => Some(Lang::Markdown),
          "md" => Some(Lang::Markdown),
          "mht" => Some(Lang::Xml),
          "mhtml" => Some(Lang::Xml),
          "mjs" => Some(Lang::Javascript),
          "mk" => Some(Lang::Makefile),
          "mm" => Some(Lang::Objectivec),
          "patch" => Some(Lang::Diff),
          "perl" => Some(Lang::Perl),
          "php" => Some(Lang::Php),
          "phps" => Some(Lang::Xml),
          "phtml" => Some(Lang::Php),
          "pl" => Some(Lang::Perl),
          "plist" => Some(Lang::Xml),
          "pm" => Some(Lang::Perl),
          "podspec" => Some(Lang::Ruby),
          "py" => Some(Lang::Python),
          "r" => Some(Lang::R),
          "rake" => Some(Lang::Ruby),
          "rb" => Some(Lang::Ruby),
          "rbx" => Some(Lang::Ruby),
          "rjs" => Some(Lang::Ruby),
          "rmd" => Some(Lang::R),
          "rs" => Some(Lang::Rust),
          "rss" => Some(Lang::Xml),
          "s" => Some(Lang::Armasm),
          "sass" => Some(Lang::Scss),
          "sbt" => Some(Lang::Scala),
          "sc" => Some(Lang::Scala),
          "scala" => Some(Lang::Scala),
          "scss" => Some(Lang::Scss),
          "sh" => Some(Lang::Shell),
          "sql" => Some(Lang::Sql),
          "svg" => Some(Lang::Xml),
          "swift" => Some(Lang::Swift),
          "thor" => Some(Lang::Ruby),
          "toml" => Some(Lang::Ini),
          "tpl" => Some(Lang::Xml),
          "ts" => Some(Lang::Typescript),
          "tsx" => Some(Lang::Typescript),
          "txt" => Some(Lang::Plaintext),
          "vb" => Some(Lang::Vbnet),
          "vbs" => Some(Lang::Vbnet),
          "xht" => Some(Lang::Xml),
          "xhtml" => Some(Lang::Xml),
          "xml" => Some(Lang::Xml),
          "xsd" => Some(Lang::Xml),
          "xsl" => Some(Lang::Xml),
          "yaml" => Some(Lang::Yaml),
          "yml" => Some(Lang::Yaml),
          "yrl" => Some(Lang::Erlang),
          "zsh" => Some(Lang::Shell),
          _ => None,
        }
      },
    }
  }
  pub fn from_str(raw: &str) -> Option<Self> {
    match raw {
      "armasm" => Some(Lang::Armasm),
      "c" => Some(Lang::C),
      "clojure" => Some(Lang::Clojure),
      "cmake" => Some(Lang::Cmake),
      "coffeescript" => Some(Lang::Coffeescript),
      "cpp" => Some(Lang::Cpp),
      "csharp" => Some(Lang::Csharp),
      "css" => Some(Lang::Css),
      "dart" => Some(Lang::Dart),
      "diff" => Some(Lang::Diff),
      "elixir" => Some(Lang::Elixir),
      "erlang" => Some(Lang::Erlang),
      "go" => Some(Lang::Go),
      "graphql" => Some(Lang::Graphql),
      "groovy" => Some(Lang::Groovy),
      "haskell" => Some(Lang::Haskell),
      "ini" => Some(Lang::Ini),
      "java" => Some(Lang::Java),
      "javascript" => Some(Lang::Javascript),
      "json" => Some(Lang::Json),
      "julia" => Some(Lang::Julia),
      "kotlin" => Some(Lang::Kotlin),
      "less" => Some(Lang::Less),
      "lisp" => Some(Lang::Lisp),
      "lua" => Some(Lang::Lua),
      "makefile" => Some(Lang::Makefile),
      "markdown" => Some(Lang::Markdown),
      "objectivec" => Some(Lang::Objectivec),
      "perl" => Some(Lang::Perl),
      "php" => Some(Lang::Php),
      "plaintext" => Some(Lang::Plaintext),
      "python" => Some(Lang::Python),
      "r" => Some(Lang::R),
      "ruby" => Some(Lang::Ruby),
      "rust" => Some(Lang::Rust),
      "scala" => Some(Lang::Scala),
      "scss" => Some(Lang::Scss),
      "shell" => Some(Lang::Shell),
      "sql" => Some(Lang::Sql),
      "swift" => Some(Lang::Swift),
      "typescript" => Some(Lang::Typescript),
      "vbnet" => Some(Lang::Vbnet),
      "xml" => Some(Lang::Xml),
      "yaml" => Some(Lang::Yaml),
      _ => None,
    }
  }
  pub fn to_str(&self) -> &str {
    match self {
      Lang::Armasm => "armasm",
      Lang::C => "c",
      Lang::Clojure => "clojure",
      Lang::Cmake => "cmake",
      Lang::Coffeescript => "coffeescript",
      Lang::Cpp => "cpp",
      Lang::Csharp => "csharp",
      Lang::Css => "css",
      Lang::Dart => "dart",
      Lang::Diff => "diff",
      Lang::Elixir => "elixir",
      Lang::Erlang => "erlang",
      Lang::Go => "go",
      Lang::Graphql => "graphql",
      Lang::Groovy => "groovy",
      Lang::Haskell => "haskell",
      Lang::Ini => "ini",
      Lang::Java => "java",
      Lang::Javascript => "javascript",
      Lang::Json => "json",
      Lang::Julia => "julia",
      Lang::Kotlin => "kotlin",
      Lang::Less => "less",
      Lang::Lisp => "lisp",
      Lang::Lua => "lua",
      Lang::Makefile => "makefile",
      Lang::Markdown => "markdown",
      Lang::Objectivec => "objectivec",
      Lang::Perl => "perl",
      Lang::Php => "php",
      Lang::Plaintext => "plaintext",
      Lang::Python => "python",
      Lang::R => "r",
      Lang::Ruby => "ruby",
      Lang::Rust => "rust",
      Lang::Scala => "scala",
      Lang::Scss => "scss",
      Lang::Shell => "shell",
      Lang::Sql => "sql",
      Lang::Swift => "swift",
      Lang::Typescript => "typescript",
      Lang::Vbnet => "vbnet",
      Lang::Xml => "xml",
      Lang::Yaml => "yaml",
    }
  }
}
