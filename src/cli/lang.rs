use std::{path, ffi::OsStr};

pub fn from(path: &str) -> Option<&str> {
  let extension
    = path::Path::new(path)
      .extension().and_then(OsStr::to_str);
  if extension.is_none() {
    return None;
  }

  match extension.unwrap() {
    "bash" => Some("bash"),
    "bashrc" => Some("bash"),
    "c" => Some("c"),
    "h" => Some("c"),
    "cpp" => Some("cpp"),
    "cc" => Some("cpp"),
    "cxx" => Some("cpp"),
    "hpp" => Some("cpp"),
    "hh" => Some("cpp"),
    "hxx" => Some("cpp"),
    "cs" => Some("csharp"),
    "css" => Some("css"),
    "diff" => Some("diff"),
    "patch" => Some("diff"),
    "go" => Some("go"),
    "graphql" => Some("graphql"),
    "gql" => Some("graphql"),
    "toml" => Some("ini"),
    "ini" => Some("ini"),
    "java" => Some("java"),
    "js" => Some("javascript"),
    "jsx" => Some("javascript"),
    "json" => Some("json"),
    "ipynb" => Some("json"),
    "kt" => Some("kotlin"),
    "kts" => Some("kotlin"),
    "less" => Some("less"),
    "lua" => Some("lua"),
    "mk" => Some("makefile"),
    "makefile" => Some("makefile"),
    "m4" => Some("makefile"),
    "md" => Some("markdown"),
    "markdown" => Some("markdown"),
    "m" => Some("objectivec"),
    "mm" => Some("objectivec"),
    "php" => Some("php"),
    "php3" => Some("php"),
    "php4" => Some("php"),
    "php5" => Some("php"),
    "php7" => Some("php"),
    "phtml" => Some("php"),
    "tpl" => Some("php-template"),
    "phps" => Some("php-template"),
    "txt" => Some("plaintext"),
    "log" => Some("plaintext"),
    "py" => Some("python"),
    "r" => Some("r"),
    "R" => Some("r"),
    "Rmd" => Some("r"),
    "Rnw" => Some("r"),
    "rb" => Some("ruby"),
    "rbx" => Some("ruby"),
    "rjs" => Some("ruby"),
    "gemspec" => Some("ruby"),
    "podspec" => Some("ruby"),
    "thor" => Some("ruby"),
    "irbrc" => Some("ruby"),
    "rake" => Some("ruby"),
    "rs" => Some("rust"),
    "scss" => Some("scss"),
    "sass" => Some("scss"),
    "sh" => Some("shell"),
    "ksh" => Some("shell"),
    "zsh" => Some("shell"),
    "zshrc" => Some("shell"),
    "sql" => Some("sql"),
    "swift" => Some("swift"),
    "ts" => Some("typescript"),
    "tsx" => Some("typescript"),
    "vb" => Some("vbnet"),
    "vbs" => Some("vbnet"),
    "wasm" => Some("wasm"),
    "html" => Some("xml"),
    "htm" => Some("xml"),
    "xhtml" => Some("xml"),
    "xht" => Some("xml"),
    "mhtml" => Some("xml"),
    "mht" => Some("xml"),
    "xml" => Some("xml"),
    "xsl" => Some("xml"),
    "xsd" => Some("xml"),
    "svg" => Some("xml"),
    "rss" => Some("xml"),
    "atom" => Some("xml"),
    "plist" => Some("xml"),
    "ejs" => Some("xml"),
    "djc" => Some("xml"),
    "yml" => Some("yaml"),
    "yaml" => Some("yaml"),
    _ => None,
  }
}

pub fn supported(lang: &str) -> Option<&str> {
  match lang {
    "bash" => Some(lang),
    "c" => Some(lang),
    "cpp" => Some(lang),
    "csharp" => Some(lang),
    "css" => Some(lang),
    "diff" => Some(lang),
    "go" => Some(lang),
    "graphql" => Some(lang),
    "ini" => Some(lang),
    "java" => Some(lang),
    "javascript" => Some(lang),
    "json" => Some(lang),
    "kotlin" => Some(lang),
    "less" => Some(lang),
    "lua" => Some(lang),
    "makefile" => Some(lang),
    "markdown" => Some(lang),
    "objectivec" => Some(lang),
    "php" => Some(lang),
    "php-template" => Some(lang),
    "plaintext" => Some(lang),
    "python" => Some(lang),
    "r" => Some(lang),
    "ruby" => Some(lang),
    "rust" => Some(lang),
    "scss" => Some(lang),
    "shell" => Some(lang),
    "sql" => Some(lang),
    "swift" => Some(lang),
    "typescript" => Some(lang),
    "vbnet" => Some(lang),
    "wasm" => Some(lang),
    "xml" => Some(lang),
    "yaml" => Some(lang),
    _ => None,
  }
}
