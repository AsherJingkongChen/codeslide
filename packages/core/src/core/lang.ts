export type Lang = keyof typeof Lang;

export const Lang = {
  armasm: true,
  c: true,
  clojure: true,
  cmake: true,
  coffeescript: true,
  cpp: true,
  csharp: true,
  css: true,
  dart: true,
  diff: true,
  elixir: true,
  erlang: true,
  go: true,
  graphql: true,
  groovy: true,
  haskell: true,
  ini: true,
  java: true,
  javascript: true,
  json: true,
  julia: true,
  kotlin: true,
  less: true,
  lisp: true,
  lua: true,
  makefile: true,
  markdown: true,
  objectivec: true,
  perl: true,
  php: true,
  plaintext: true,
  python: true,
  r: true,
  ruby: true,
  rust: true,
  scala: true,
  scss: true,
  shell: true,
  sql: true,
  swift: true,
  typescript: true,
  vbnet: true,
  xml: true,
  yaml: true,
} as const;

export const isLang = (
  raw: string
): raw is Lang => raw in Lang;

export const guessLangFromBasename = (
  basename?: string,
): Lang | undefined => (
  basename !== undefined ? (
    {
      'CMakeLists.txt': 'cmake',
      'Makefile': 'makefile',
      '.bash_profile': 'shell',
      '.bashrc': 'shell',
      '.env': 'shell',
      '.profile': 'shell',
      '.zshrc': 'shell',
    } as Record<string, Lang | undefined>
  )[basename] : undefined
);

export const guessLangFromExtname = (
  extname?: string,
): Lang | undefined => (
  extname !== undefined ? (
    {
      '.asm': 'armasm',
      '.c': 'c',
      '.cc': 'cpp',
      '.cjs': 'javascript',
      '.cl': 'lisp',
      '.clj': 'clojure',
      '.cljc': 'clojure',
      '.cljs': 'clojure',
      '.cmake': 'cmake',
      '.coffee': 'coffeescript',
      '.cpp': 'cpp',
      '.cs': 'csharp',
      '.cson': 'json',
      '.css': 'css',
      '.cxx': 'cpp',
      '.dart': 'dart',
      '.diff': 'diff',
      '.ejs': 'xml',
      '.el': 'lisp',
      '.erl': 'erlang',
      '.ex': 'elixir',
      '.exs': 'elixir',
      '.gemspec': 'ruby',
      '.go': 'go',
      '.gql': 'graphql',
      '.graphql': 'graphql',
      '.groovy': 'groovy',
      '.h': 'c',
      '.hh': 'cpp',
      '.hpp': 'cpp',
      '.hrl': 'erlang',
      '.hs': 'haskell',
      '.htm': 'xml',
      '.html': 'xml',
      '.hxx': 'cpp',
      '.ini': 'ini',
      '.ipynb': 'json',
      '.irbrc': 'ruby',
      '.j2': 'xml',
      '.java': 'java',
      '.jinja': 'xml',
      '.jinja2': 'xml',
      '.jl': 'julia',
      '.js': 'javascript',
      '.json': 'json',
      '.jsx': 'javascript',
      '.ksh': 'shell',
      '.kt': 'kotlin',
      '.kts': 'kotlin',
      '.l': 'lisp',
      '.less': 'less',
      '.lisp': 'lisp',
      '.log': 'plaintext',
      '.lua': 'lua',
      '.lsp': 'lisp',
      '.m': 'objectivec',
      '.make': 'makefile',
      '.makefile': 'makefile',
      '.markdown': 'markdown',
      '.md': 'markdown',
      '.mht': 'xml',
      '.mhtml': 'xml',
      '.mjs': 'javascript',
      '.mk': 'makefile',
      '.mm': 'objectivec',
      '.patch': 'diff',
      '.perl': 'perl',
      '.php': 'php',
      '.phps': 'xml',
      '.phtml': 'php',
      '.pl': 'perl',
      '.plist': 'xml',
      '.pm': 'perl',
      '.podspec': 'ruby',
      '.py': 'python',
      '.r': 'r',
      '.rake': 'ruby',
      '.rb': 'ruby',
      '.rbx': 'ruby',
      '.rjs': 'ruby',
      '.rmd': 'r',
      '.rs': 'rust',
      '.rss': 'xml',
      '.s': 'armasm',
      '.sass': 'scss',
      '.sbt': 'scala',
      '.sc': 'scala',
      '.scala': 'scala',
      '.scss': 'scss',
      '.sh': 'shell',
      '.sql': 'sql',
      '.svg': 'xml',
      '.swift': 'swift',
      '.thor': 'ruby',
      '.toml': 'ini',
      '.tpl': 'xml',
      '.ts': 'typescript',
      '.tsx': 'typescript',
      '.txt': 'plaintext',
      '.vb': 'vbnet',
      '.vbs': 'vbnet',
      '.xht': 'xml',
      '.xhtml': 'xml',
      '.xml': 'xml',
      '.xsd': 'xml',
      '.xsl': 'xml',
      '.yaml': 'yaml',
      '.yml': 'yaml',
      '.yrl': 'erlang',
      '.zsh': 'shell',
    } as Record<string, Lang | undefined>
  )[extname.toLowerCase()] : undefined
);
